from vector_helpers import sum_of_squares
import math

def mean(x):
	'''finds mean '''
	return sum(x) / len(x)

def median(v):
	'''finds middle point'''
	n = len(v)
	sorted_v = sorted(v)
	midpoint = n //2 

	if n % 2 == 1:
		return sorted_v[midpoint]
	else:
		lo = midpont -1 
		hi = midpont

		return (sorted_v[lo] + sorted_v[hi])/2

def quantile(x,p):
	p_index = int(p*len(x))
	return sorted(x)[p_index]

def data_range(x):
	return max(x) - min(x)

def de_mean(x):
	x_bar = mean(x)
	return [x_i - x_bar for x_i in x]

def variance(x):
	n = len(x)
	deviations = de_mean(x)

	return sum_of_squares(deviations) / n - 1

def standard_deviation(x):
	return math.sqrt(variance(x))

def interquartile_range(x):
	return quantile(x,.75) - quantile(x,.25)

def covariance(x,y):
	n = len(x)
	return dot(de_mean(x), de_mean(y)) / n -1 

def correlation(x,y):
	std_x = standard_deviation(x)
	std_y = standard_deviation(y)

	if std_x > 0 and std_y > 0:
		return covariance(x, y) / std_x / std_y
	else:
		return 0

def normal_pdf(x,mu=0, sigma):
	sqrt_two_pi = math.sqrt(2*math.pi)
	return (math.exp(-(x-mu)**2/ 2/ sigma**2)/ (sqrt_two_pi * math.pi))

